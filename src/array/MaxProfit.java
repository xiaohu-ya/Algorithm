package src.array;

/**
 * @PROJECT_NAME: algorithm
 * @USER: xiaohu
 * @DESCRIPTION： 买买股票的最佳时机
 * @DATE: 2021/3/8 16:14
 */

/**
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * 如果你最多只允许完成一笔交易（即买入和卖出一支股票），
 * 设计一个算法来计算你所能获取的最大利润。注意你不能在买入股票前卖出股票。
 * 示例 1:
 * 输入: [7,1,5,3,6,4]
 * 输出: 7
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出,
 * 这笔交易所能获得利润 = 5-1 = 4 。
 * 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出,
 * 这笔交易所能获得利润 = 6-3 = 3 。
 * 示例 2:
 * 输入: [1,2,3,4,5]
 * 输出: 4
 * 解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出,
 * 这笔交易所能获得利润 = 5-1 = 4 。
 * 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
 * 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
 * 示例 3:
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 */
public class MaxProfit {

    public void result(int[] profit){
        int m = profit.length;//数组的长度
        //定义一个m行2列的二维数组，第一列（0）表示交易结束手里没有剩余股票，第二列（1）表示交易结束手里有剩余股票
        int[][] dp = new int[m][2];
        dp[0][0] = 0;//第一天结束交易，手里没有股票，则利润为0
        dp[0][1] = -profit[0];//第一天结束交易，手里有股票，则利润为-profit[0]
        for (int i = 1;i<m;i++){
            /**第i天结束时,手里没有股票时的利润。手里没有股票分为两种情况：第一种是前一天结束时手里就没有股票，
             * 然后今天也没有买入，手机就没有股票，则利润是前一天结束时 没有股票时的利润，即dp[i-1][0];
             * 第二种情况是时前一天结束时手里有一张股票，然后今天又卖出了，手里正好没有股票，则利润为dp[i-1][1]+profit[i],
             * 两者求最大值作为利润
            **/
            dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1]+profit[i]);
            /**
             *第i天结束时,手里有股票时的利润。也可分为两种情况：第一种是前一天结束时手里就有一张股票，然后今天也没有卖出，
             * 则利润为dp[i-1][1];
             * 第二种情况是前一天结束时手里没有股票，然后今天要买入，则利润为了前一天没有股票时的利润减去今天买入的，
             * 为dp[i-1][0]-profit[i]
             */
            dp[i][1] = Math.max(dp[i-1][1],dp[i-1][0]-profit[i]);
        }
        //全部交易结束后，持有股票的收益一定低于不持有股票的收益，
        // 因此这时候dp[n-1][0]dp[n−1][0] 的收益必然是大于dp[n-1][1]dp[n−1][1] 的
        System.out.println(dp[m-1][0]);
    }

    public static void main(String[] args) {
        int[] profit = new int[]{7,1,5,3,6,4};
        new MaxProfit().result(profit);
    }
}
